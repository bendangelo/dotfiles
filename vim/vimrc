set t_Co=256

set nocompatible              " be iMproved, required
filetype off                  " required
syntax on
"set mouse=a
" Auto indent
filetype indent on
filetype plugin indent on     " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
let mapleader="\<space>"
let g:solarized_termcolors=256
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git

set pastetoggle=<F10>
set number
set cursorline
set noswapfile
set autoindent
set hlsearch
set ignorecase
set smartcase
set nobackup
set autoread
set laststatus=2
set ttimeoutlen=50
" a combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop
set softtabstop=4
set smarttab
set expandtab
set tabstop=4
set shiftwidth=4

set complete=.,b,u,]

" gvim
if has('gui_running')
    set go-=T
    set guifont=Liberation\ Mono\ 8
    set go-=r
    set go-=L
endif

call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'
Plugin 'tommcdo/vim-ninja-feet'
Plugin 'tommcdo/vim-exchange'
Plugin 'wellle/targets.vim'
Plugin 'ervandew/supertab'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'henrik/vim-qargs'
Plugin 'tpope/vim-sensible'
Plugin 'jdonaldson/vaxe'
Plugin 'altercation/vim-colors-solarized'
Plugin 'plasticboy/vim-markdown'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails.git'
Plugin 'scrooloose/nerdtree.git'
Plugin 'scrooloose/nerdcommenter'
Plugin 'L9'
Plugin 'justinmk/vim-sneak'
" Plugin 'Lokaltog/vim-easymotion'
Plugin 'groenewege/vim-less'
Plugin 'tpope/vim-surround'
" Plugin 'kien/ctrlp.vim.git'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/neomru.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'flazz/vim-colorschemes'
Plugin 'https://github.com/mileszs/ack.vim.git'
call vundle#end()

let g:ctrlp_custom_ignore = 'dist\|export\|node_modules\|DS_Store\|git'
let g:ctrlp_working_path_mode = 2
let g:ctrlp_max_depth = 5
"
" Unite
let g:unite_enable_start_insert = 1
let g:unite_force_overwrite_statusline = 0
let g:unite_split_rule = "botright"
let g:unite_winheight = 10

call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ 'docs/',
      \ '\.git/',
      \ 'node_modules/',
      \ 'dist/',
      \ 'export/',
      \ ], '\|'))

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

nnoremap <C-P> :<C-u>Unite  -buffer-name=files   -start-insert file_rec/async<cr>
nnoremap <leader>y :<C-u>Unite -buffer-name=yank    history/yank<cr>
nnoremap <leader>r :<C-u>Unite -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <Leader>b :Unite -start-insert buffer tab file_mru directory_mru<cr>
nnoremap <Leader>p :Unite -start-insert -buffer-name=files file_rec<cr>

autocmd FileType unite call s:unite_settings()

function! s:unite_settings()
  let b:SuperTabDisabled=1
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction

" Shortcuts
map <C-k>b :NERDTreeToggle<CR>
imap jk <Esc>
map <leader>s :source $MYVIMRC<CR>
map <leader>e :vs $MYVIMRC<CR>
map <leader>a :Ack
" format the entire file
nmap <leader>fef ggVG=
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
noremap <tab> <c-w><c-w>
nmap Y y$

if executable("ag")
    let g:ackprg = 'ag --nogroup --nocolor --column'
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_rec_async_command= 'ag --nocolor --nogroup --hidden -g ""'
endif

colorscheme default
set background=dark

" automatic formatting
autocmd BufWritePre *.slim :%s/\s\+$//e
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.hx :%s/\s\+$//e

au BufReadPost *.hxp set syntax=haxe
au BufReadPost *.hx set syntax=haxe
au BufReadPost *.md set syntax=markdown
au BufReadPost *.less set syntax=less
